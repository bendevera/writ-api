{"version":3,"sources":["history.js","components/Navbar/Navbar.js","components/Home/Home.js","components/Register/Register.js","components/Login/Login.js","components/Works/Works.js","config.js","util.js","components/App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Navbar","props","buttonText","auth","buttonPath","className","to","Home","Register","handleChange","e","value","target","setState","state","name","handleSubmit","preventDefault","sendRegister","email","password","onChange","this","type","onClick","React","Component","Login","sendLogin","Works","fetchData","data","map","item","index","href","Config","apiURL","App","getMyWorks","works","Promise","resolve","reject","console","log","fetch","method","headers","localStorage","getItem","then","response","json","responseJson","setItem","authenticated","body","JSON","stringify","loginAction","result","history","push","catch","error","registerAction","exact","path","component","render","handleRegister","handleLogin","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4955d1f2.chunk.js","sourcesContent":["// history.js\nimport { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory({\n  /* pass a configuration object here if needed */\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst Navbar = (props) => {\n    const buttonText = props.auth ? \"Logout\" : \"Login\";\n    const buttonPath = props.auth ? \"/logout\" : \"Logout\";\n    return (\n        <nav className=\"navbar navbar-light bg-light justify-content-between\">\n            <span className=\"navbar-brand mb-0 h1\">writ</span>\n            <Link to={buttonPath}><button className=\"btn btn-outline-dark\">{buttonText}</button></Link>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Home = (props) => {\n    return (\n        <div className=\"fluid-container\">\n            <div className=\"jumbotron\">\n                <h1 className=\"display-4\">Welcome to writ:</h1>\n                <p className=\"lead\">A version control system for literary works.</p>\n                <hr className=\"my-4\" />\n                <p>Sign up, get to writing freely and cleanly.</p>\n                <Link className=\"btn btn-outline-dark btn-lg\" to=\"/register\">Register</Link>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Home;","import React from 'react';\n\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            email: \"\",\n            password: \"\"\n        }\n    }\n\n    handleChange = (e) => {\n        const value = e.target.value;\n        this.setState({\n            ...this.state,\n            [e.target.name]: value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.sendRegister(this.state.email, this.state.password);\n    }\n\n    render() {\n        return (\n            <div className=\"container my-2\">\n                <h2>Register an account.</h2>\n                <form>\n                    <div className=\"form-group\">\n                        <label>Email address</label>\n                        <input name=\"email\" onChange={this.handleChange} type=\"email\" className=\"form-control\" />\n                        <small className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Password</label>\n                        <input name=\"password\" onChange={this.handleChange} type=\"password\" className=\"form-control\" />\n                    </div>\n                    <button className=\"btn btn-outline-dark\" onClick={this.handleSubmit}>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default Register;","import React from 'react';\n\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            email: \"\",\n            password: \"\"\n        }\n    }\n\n    handleChange = (e) => {\n        const value = e.target.value;\n        this.setState({\n            ...this.state,\n            [e.target.name]: value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.sendLogin(this.state.email, this.state.password);\n    }\n\n    render() {\n        return (\n            <div className=\"container my-2\">\n                <h2>Login to your account.</h2>\n                <form>\n                    <div className=\"form-group\">\n                        <label>Email address</label>\n                        <input name=\"email\" onChange={this.handleChange} type=\"email\" className=\"form-control\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Password</label>\n                        <input name=\"password\" onChange={this.handleChange} type=\"password\" className=\"form-control\" />\n                    </div>\n                    <button className=\"btn btn-outline-dark\" onClick={this.handleSubmit}>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default Login;","import React from 'react';\n\n\nclass Works extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentWillMount() {\n        this.props.fetchData()\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h2>My Works.</h2>\n                {this.props.data.map((item, index) => {\n                    return (\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Card title</h5>\n                                <h6 className=\"card-subtitle mb-2 text-muted\">Card subtitle</h6>\n                                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n                                <a href=\"#\" className=\"card-link\">Card link</a>\n                                <a href=\"#\" className=\"card-link\">Another link</a>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n} \n\n\nexport default Works;","// const Config = {\n//     apiURL: \"https://writ-api.herokuapp.com\"\n// }\n\nconst Config = {\n    apiURL: \"http://localhost:5000\"\n}\n\nexport default Config;","import Config from './config.js';\n\n\nfunction getAuthHeader() {\n    console.log('Bearer ' + localStorage.getItem('writToken'))\n    return 'Bearer ' + localStorage.getItem('writToken');\n}\n\n\nexport const loginAction = function(email, password){\n    return new Promise((resolve, reject) => {\n        fetch(Config.apiURL+ \"/auth/login\", {\n            method: 'POST',\n            headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: email, password: password})\n        })\n        .then(response => response.json())\n        .then(responseJson => {\n            console.log(responseJson)\n            if (responseJson['status'] == 'success') {\n                console.log(\"Setting writToken\")\n                localStorage.setItem('writToken', responseJson['auth_token']);\n                resolve(\"Logged in.\");\n            }\n            reject(responseJson['message']);\n            // localStorage.setItem('itemName', value)\n            // localStorage.getItem('itemName')\n        })\n    })\n}\n\n\nexport const registerAction = function(email, password){\n    return new Promise((resolve, reject) => {\n        fetch(Config.apiURL+ \"/auth/register\", {\n            method: 'POST',\n            headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: email, password: password})\n        })\n        .then(response => response.json())\n        .then(responseJson => {\n            console.log(responseJson)\n            if (responseJson['status'] == 'success') {\n                console.log(\"Setting writToken\")\n                localStorage.setItem('writToken', responseJson['auth_token']);\n                resolve(\"Logged in.\");\n            }\n            reject(responseJson['message']);\n        })\n    })\n}\n\n\nexport const getWorks = function(){\n    return new Promise((resolve, reject) => {\n        console.log(\"FUCK THIS\")\n        fetch(Config.apiURL+ \"/works\", {\n            method: 'get',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Authorization': getAuthHeader()\n            }\n        })\n        .then(response => response.json())\n        .then(responseJson => {\n            console.log(responseJson)\n            if (responseJson['status'] == 'success') {\n                console.log(\"Setting writToken\")\n                localStorage.setItem('writToken', responseJson['auth_token']);\n                resolve(\"Logged in.\");\n            }\n            reject(responseJson['message']);\n            // localStorage.setItem('itemName', value)\n            // localStorage.getItem('itemName')\n        })\n    })\n}","import React from 'react';\nimport { Router } from \"react-router\";\nimport { Route } from 'react-router-dom';\nimport history from '../history';\nimport Navbar from './Navbar/Navbar';\nimport Home from './Home/Home';\nimport Register from './Register/Register';\nimport Login from './Login/Login';\nimport Works from './Works/Works';\nimport { loginAction, registerAction, getWorks } from '../util';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      authenticated: false,\n      works: []\n    }\n  }\n\n  handleLogin(email, password) {\n    loginAction(email, password)\n      .then((result) => {\n        console.log(\"Should push /works\")\n        history.push('/works')\n        // isn't working for some reason maybe need to bind this\n        // this.setState({\n        //   authenticated: true\n        // })\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  handleRegister(email, password) {\n    registerAction(email, password)\n      .then((result) => {\n        console.log(\"Should push /works\")\n        history.push('/works')\n        // isn't working for some reason maybe need to bind this\n        // this.setState({\n        //   authenticated: true\n        // })\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  getMyWorks = () => {\n    let works = getWorks()\n    console.log(works)\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <div className=\"App\">\n          <Navbar auth={this.state.authenticated} />\n          <Route exact path=\"/\" component={Home} />\n          <Route \n            path=\"/register\" \n            render={(props) => <Register {...props} sendRegister={this.handleRegister} /> }\n          />\n          <Route \n            path=\"/login\" \n            render={(props) => <Login {...props} sendLogin={this.handleLogin} />} \n          />\n          <Route \n            path=\"/works\" \n            render={(props) => <Works {...props} data={this.state.works} fetchData={this.getMyWorks} />} \n          /> \n        </div>\n      </Router>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}